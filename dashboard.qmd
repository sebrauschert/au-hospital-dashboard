---
title: "Australian Hospital Statistics"
format:
  dashboard:
    logo: "images/logo_1.png"
    orientation: columns
---

## Row {width="45%"}

```{r, loadpackages}
#| echo: false
#| include: false
library(tidyverse)
library(httr)
library(jsonlite)
library(leaflet)
library(htmlwidgets)
library(gt)

# Get longitude and latitude

url <- "https://myhospitalsapi.aihw.gov.au//api/v1/reporting-units"

# Make the GET request
response <- GET(url)

# Check if the request was successful
if (status_code(response) == 200) {
  # Parse the response content
  datasets <- content(response, as = "text", encoding = "UTF-8")
  datasets <- fromJSON(datasets, flatten = TRUE)
  
  # Display the list of datasets
  print(datasets$result)
} else {
  # Print the error message
  print(paste("Failed to fetch datasets:", status_code(response)))
}


hospitals <- datasets$result |>
  select(longitude, latitude, reporting_unit_name)

```

```{r, showdata}
head(hospitals,20) |> 
  gt(id = "custom") |>
  cols_label(
    longitude = md("**Longitude**"),
    latitude = md("**Latitude**"),
    reporting_unit_name = md("**Provider Name**")
  ) |> 
  tab_options(
    table.font.color = "#FFFFFF",
    table.background.color = "#191414",
    table.font.size = px(14),
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    table_body.hlines.color = "transparent",
    table_body.border.bottom.color = "transparent",
    column_labels.border.bottom.color = "transparent",
    column_labels.border.top.color = "transparent",
    footnotes.background.color = "#282828",
    source_notes.background.color = "#282828"
  ) |> 
  # opt_interactive(
  #   active = TRUE,
  #   use_pagination = TRUE,
  #   use_pagination_info = TRUE,
  #   use_sorting = TRUE,
  #   use_search = TRUE,
  #   use_filters = TRUE,
  #   use_resizers = FALSE,
  #   use_highlight = FALSE,
  #   use_compact_mode = FALSE,
  #   use_text_wrapping = FALSE,
  #   use_page_size_select = FALSE,
  #   page_size_default = 25,
  #   page_size_values = c(10, 25, 50, 100),
  #   pagination_type = c("numbers", "jump", "simple"),
  #   height = "auto"
  # ) |>
  tab_style_body(
    style = cell_borders(
      sides = c("top", "bottom"),
      weight = px(0) # Remove row borders
    ),
    fn = function(x) { is.numeric(x) | is.character(x) }
  ) |> 
  opt_css(
    css = "
    table tr:nth-child(odd) {
      background-color: #282828;
    }

    table tr:hover {
      background-color: #383838;
    }

    div#custom {
      overflow-x: unset !important;
      overflow-y: unset !important;
    }

    #custom .gt_col_heading {
       position: sticky !important;
       top: -5px !important;
       z-index: 10 !important;
    }
    "
  ) |>
  cols_align(
  align = "left",
  columns = everything()
  ) 

```

## Column {width="55%"}

### Row {height="20%"}

#### Column {width="33%"}
Stat 1

#### Column {width="33%"}
Stat 2

#### Column {width="33%"}
Stat 3


### Row {height="80%"}

```{r}
#| include: false
#| echo: false
# Create leaflet map
# Create a custom icon for the hospitals
hospital_icon <- makeIcon(
  iconUrl = "images/pin.png",  # Example hospital icon URL
  iconWidth = 30,    # Adjust width
  iconHeight = 30,   # Adjust height
  iconAnchorX = 15,  # Center the icon horizontally
  iconAnchorY = 30   # Anchor the icon at the bottom
)

# Create a leaflet map with customized cluster markers and hospital icon
map <- leaflet(hospitals) %>%
  addTiles() %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addMarkers(
    ~longitude, ~latitude, 
    popup = ~reporting_unit_name,
    icon = hospital_icon,  # Use the custom hospital icon
    clusterOptions = markerClusterOptions(
      iconCreateFunction = JS("function(cluster) {
        return new L.DivIcon({ 
          html: '<div style=\"background-color: tomato; color: white; border-radius: 50%; text-align: center; line-height: 30px; width: 30px; height: 30px;\">' + cluster.getChildCount() + '</div>', 
          className: 'my-cluster-icon'
        });
      }")
    )
  ) %>%
  setView(lng = 133.7751, lat = -25.2744, zoom = 4) %>%
  addEasyButton(easyButton(
    icon = "fa-globe",  # Font Awesome globe icon
    title = "Re-center",
    onClick = JS("function(btn, map) { map.setView([ -25.2744, 133.7751 ], 4); }")
  ))

# Save the map to an HTML file
saveWidget(map, "hospitals_map.html", selfcontained = TRUE)

```

<!-- Iframe for displaying the Leaflet map -->

<iframe id="map-iframe" src="hospitals_map.html" width="100%" height="100%"></iframe>

<!-- Button to pop out the iframe -->
<button style="background-color: #191414; border:none; color:white;" onclick="popOutIframe()">Full screen</button>

<script>
function popOutIframe() {
  var iframeSrc = document.getElementById('map-iframe').src;
  window.open(iframeSrc, 'Map', 'width=800,height=600');
}
</script> 
