---
title: "Australian Hospital Statistics"
format:
  dashboard:
    logo: "images/logo_1.png"
    orientation: columns
---

## Row {width="45%"}

```{r, loadpackages}
#| echo: false
#| include: false
library(tidyverse)
library(httr)
library(jsonlite)
library(leaflet)
library(htmlwidgets)
library(gt)
library(htmltools)
library(bsicons)
library(bslib)

# Function to retrieve datasets, extract relevant information, and add columns
fetch_and_process_data <- function(url, data_set_id = NULL, data_set_name = NULL) {
  response <- GET(url)
  
  if (status_code(response) == 200) {
    datasets <- content(response, as = "text", encoding = "UTF-8") %>%
      fromJSON(flatten = TRUE) %>%
      .$result
    
    if (!is.null(data_set_id) && !is.null(data_set_name)) {
      datasets <- datasets %>%
        mutate(data_set_name = data_set_name) %>%
        mutate(
          year = str_extract(data_set_name, "\\d{4}-\\d{2}") %>% str_sub(1, 4),
          month = str_extract(data_set_name, "\\d{4}-\\d{2}") %>% str_sub(6, 7)
        )
    }
    return(datasets)
  } else {
    warning(paste("Failed to fetch data from URL:", url))
    return(NULL)
  }
}

# Function to retrieve datasets and add data_set_name
fetch_data_set <- function(data_set_id, data_set_name) {
  # Define the API endpoint
  url <- paste0("https://myhospitalsapi.aihw.gov.au/api/v1/datasets/", data_set_id, "/data-items")
  
  # Make the GET request
  response <- GET(url)
  
  # Check if the request was successful
  if (status_code(response) == 200) {
    # Parse the response content
    datasets <- content(response, as = "text", encoding = "UTF-8")
    datasets <- fromJSON(datasets, flatten = TRUE)
    
    # Add the data_set_name column
    datasets <- datasets$result |>
      mutate(data_set_name = data_set_name) |>
      mutate(
        year = str_extract(data_set_name, "\\d{4}-\\d{2}") %>% str_sub(1, 4),
        month = str_extract(data_set_name, "\\d{4}-\\d{2}") %>% str_sub(6, 7)
      )
    
    return(datasets)
  } else {
    warning(paste("Failed to retrieve data for data_set_id:", data_set_id))
    return(NULL)
  }
}


# Fetch longitude and latitude
hospitals_url <- "https://myhospitalsapi.aihw.gov.au//api/v1/reporting-units"
hospitals <- fetch_and_process_data(hospitals_url)

# Fetch datasets
datasets_url <- "https://myhospitalsapi.aihw.gov.au//api/v1/datasets"
datasets <- fetch_and_process_data(datasets_url)

# Filter for mental health data
mental <- datasets %>%
  filter(reported_measure_summary.reported_measure_name == "Mental health")

# Apply the function to all data_set_ids and combine results
combined_data <- bind_rows(
  lapply(1:nrow(mental), function(i) {
    fetch_data_set(mental$data_set_id[i], mental$data_set_name[i])
  })
)

# Select only the relevant columns from the hospital dataset
hospital_selected <- hospitals %>%
  select(reporting_unit_code, reporting_unit_name, reporting_unit_type.reporting_unit_type_name)

# Merge combined_data with the selected columns from hospital
merged_data <- merge(combined_data, hospital_selected, 
                     by.x = "reporting_unit_summary.reporting_unit_code", 
                     by.y = "reporting_unit_code", 
                     all.x = TRUE)

# Summarize data
summarized_data <- merged_data %>%
  select(reporting_unit_summary.reporting_unit_name, value, year) %>%
  group_by(reporting_unit_summary.reporting_unit_name) %>%
  summarise(
    year_range = paste(min(year), max(year), sep = " - "),
    values_list = list(value)
  )

```

```{r, showdata}
#| echo: false

# Creating the gt table
summarized_data |> 
  mutate(Condition = "Mental Health") |>
  gt(id = "custom") |>
  cols_label(
    reporting_unit_summary.reporting_unit_name = md("**Hospital**"),
    year_range = md("**Year Range**"),
    values_list = md("**Values (List)**"),
    Condition = md("**Condition**")
  ) |> 
  tab_options(
    table.font.color = "#FFFFFF",
    table.background.color = "#191414",
    table.font.size = px(14),
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    table_body.hlines.color = "transparent",
    table_body.border.bottom.color = "transparent",
    column_labels.border.bottom.color = "transparent",
    column_labels.border.top.color = "transparent",
    footnotes.background.color = "#282828",
    source_notes.background.color = "#282828"
  ) |> 
  tab_style_body(
    style = cell_borders(
      sides = c("top", "bottom"),
      weight = px(0) # Remove row borders
    ),
    fn = function(x) { is.numeric(x) | is.character(x) }
  ) |> 
  opt_css(
    css = "
    table tr:nth-child(odd) {
      background-color: #282828;
    }

    table tr:hover {
      background-color: #383838;
    }
    
    .cell-output-display {
      overflow-x: unset !important;
    }

    div#custom {
      overflow-x: unset !important;
      overflow-y: unset !important;
    }

    #custom .gt_col_heading {
       position: sticky !important;
       top: -5px !important;
       z-index: 10 !important;
    }
    "
  ) |>
  cols_align(
    align = "left",
    columns = everything()
  )  |>
  cols_nanoplot(
    columns = values_list,
    plot_type = "line",
    new_col_name = "trend",
    new_col_label = md("**Trend of Admissions**"),
    options = nanoplot_options(
      data_point_fill_color = "tomato",
      data_point_stroke_color = "tomato",
      data_area_fill_color = "tomato",
      data_line_stroke_color = "darkred"
    )
  )
```

## Column {width="55%"}

### Row {height="20%"}

#### Column {width="33%"}
Stat 1
```{r, valuebox}
# bslib::value_box(
#   title = "Maximum cases admitted",
#   value = "XXX cases",
#   tags$p("Hospital"),
#   tags$p("Year"),
#   showcase = bsicons::bs_icon("calendar")
# )
```

#### Column {width="33%"}
Stat 2

#### Column {width="33%"}
Stat 3


### Row {height="80%"}

```{r, leafletmap}
#| include: false
#| echo: false
# Create leaflet map
# Create a custom icon for the hospitals
hospital_icon <- makeIcon(
  iconUrl = "images/pin.png",  # Example hospital icon URL
  iconWidth = 30,    # Adjust width
  iconHeight = 30,   # Adjust height
  iconAnchorX = 15,  # Center the icon horizontally
  iconAnchorY = 30   # Anchor the icon at the bottom
)

# Create a leaflet map with customized cluster markers and hospital icon
map <- leaflet(hospitals) %>%
  addTiles() %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addMarkers(
    ~longitude, ~latitude, 
    popup = ~reporting_unit_name,
    icon = hospital_icon,  # Use the custom hospital icon
    clusterOptions = markerClusterOptions(
      iconCreateFunction = JS("function(cluster) {
        return new L.DivIcon({ 
          html: '<div style=\"background-color: tomato; color: white; border-radius: 50%; text-align: center; line-height: 30px; width: 30px; height: 30px;\">' + cluster.getChildCount() + '</div>', 
          className: 'my-cluster-icon'
        });
      }")
    )
  ) %>%
  setView(lng = 133.7751, lat = -25.2744, zoom = 4) %>%
  addEasyButton(easyButton(
    icon = "fa-globe",  # Font Awesome globe icon
    title = "Re-center",
    onClick = JS("function(btn, map) { map.setView([ -25.2744, 133.7751 ], 4); }")
  ))

# Save the map to an HTML file
saveWidget(map, "hospitals_map.html", selfcontained = TRUE)

```

<!-- Iframe for displaying the Leaflet map -->

<iframe id="map-iframe" src="hospitals_map.html" width="100%" height="100%"></iframe>

<!-- Button to pop out the iframe -->
<button style="background-color: #191414; border:none; color:white;" onclick="popOutIframe()">Full screen</button>

<script>
function popOutIframe() {
  var iframeSrc = document.getElementById('map-iframe').src;
  window.open(iframeSrc, 'Map', 'width=800,height=600');
}
</script> 
